@using System.Net.Http.Headers
@inject ILocalStorageService _localStorage
@inject IHttpClientFactory _client;
@inject ISnackbar Snackbar
@inject NavigationManager _navigationManager


<MudDialog>
    <DialogContent>
        @form.Date
        <MudField Label="Notes" Variant="Variant.Filled">
            @form.Content
        </MudField>
        <MudTextField @bind-Value="@TextValue" Label="Update the note" Variant="Variant.Text">
        </MudTextField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Update">Update</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public FormDiaryJournalEntry form { get; set; }

    public string TextValue { get; set; }

    protected override void OnInitialized() {
        TextValue = form.Content;
    }

    async Task Update() {
        var client = _client.CreateClient();
        var entry = new FormDiaryJournalEntry(form.Date, TextValue);
        var token = await _localStorage.GetItemAsync<string>("token");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var formAsJson = JsonConvert.SerializeObject(entry);
        var response = await client.PostAsync(Route.BaseUrl + Route.CreateOrUpdateDiaryJournals,
            new StringContent(formAsJson, Encoding.UTF8,
                Common.JsonMediaType));

        if (response.StatusCode == HttpStatusCode.Created) {
            Snackbar.Add("Journal entry is added!", Severity.Success);
            _navigationManager.NavigateTo("/home");
        }
        else {
            Snackbar.Add("Journal entry could not be added!", Severity.Error);
        }
    }
    
    void Cancel() => MudDialog.Cancel();
}